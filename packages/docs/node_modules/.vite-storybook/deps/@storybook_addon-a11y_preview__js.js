import {
  init_es_array_join
} from "./chunk-7NA6NQYA.js";
import {
  require_runtime
} from "./chunk-V5QKGXZZ.js";
import {
  init_es_array_find
} from "./chunk-EFXLWVGF.js";
import {
  init_es_weak_map
} from "./chunk-DPVISAW2.js";
import {
  init_es_object_values
} from "./chunk-GV7FKQQV.js";
import {
  init_es_array_from,
  init_es_array_includes,
  init_es_array_map,
  init_es_function_name,
  init_es_object_assign,
  init_es_object_entries,
  init_es_string_includes
} from "./chunk-7EUEQEUE.js";
import {
  init_es_symbol,
  init_es_symbol_description,
  init_es_symbol_iterator
} from "./chunk-B4LOW6EV.js";
import {
  init_es_promise
} from "./chunk-U475CQZM.js";
import "./chunk-DKZEMXFS.js";
import {
  init_web_immediate
} from "./chunk-DB3YZC7W.js";
import {
  init_es_array_filter
} from "./chunk-BTUSTFTZ.js";
import {
  init_es_array_slice,
  init_es_object_freeze,
  init_es_object_keys,
  init_es_regexp_to_string,
  init_web_dom_collections_for_each
} from "./chunk-NRGOUTM4.js";
import "./chunk-YHIQAMMS.js";
import "./chunk-LYCHPZRJ.js";
import "./chunk-KYPMOJF3.js";
import {
  esm_default,
  init_esm
} from "./chunk-S5Z5BHA5.js";
import {
  require_browser
} from "./chunk-IY6AN3JH.js";
import {
  init_es_set,
  init_es_string_replace,
  require_es_regexp_exec
} from "./chunk-LFBGXY7U.js";
import {
  init_es_array_concat,
  init_web_dom_collections_iterator,
  require_es_array_iterator,
  require_es_string_iterator
} from "./chunk-YOXPFT3P.js";
import {
  init_es_object_to_string
} from "./chunk-CFENMTIT.js";
import {
  require_window
} from "./chunk-MBRSQHGS.js";
import {
  __commonJS,
  __esm,
  __toESM
} from "./chunk-MF7N2UXY.js";

// ../../node_modules/@storybook/addon-a11y/node_modules/@storybook/channels/dist/esm/index.js
function _taggedTemplateLiteral(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }
  return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } }));
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
var import_util_deprecate, _templateObject, generateRandomId, Channel, esm_default2;
var init_esm2 = __esm({
  "../../node_modules/@storybook/addon-a11y/node_modules/@storybook/channels/dist/esm/index.js"() {
    init_es_object_freeze();
    init_es_array_slice();
    init_es_object_to_string();
    init_es_regexp_to_string();
    init_web_immediate();
    init_es_object_keys();
    init_es_array_filter();
    init_web_dom_collections_for_each();
    import_util_deprecate = __toESM(require_browser());
    init_esm();
    generateRandomId = function generateRandomId2() {
      return Math.random().toString(16).slice(2);
    };
    Channel = function() {
      function Channel2() {
        var _this = this;
        var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, transport = _ref.transport, _ref$async = _ref.async, async = _ref$async === void 0 ? false : _ref$async;
        _classCallCheck(this, Channel2);
        this.isAsync = void 0;
        this.sender = generateRandomId();
        this.events = {};
        this.data = {};
        this.transport = void 0;
        this.addPeerListener = (0, import_util_deprecate.default)(function(eventName, listener) {
          _this.addListener(eventName, listener);
        }, esm_default(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n      channel.addPeerListener is deprecated\n    "]))));
        this.isAsync = async;
        if (transport) {
          this.transport = transport;
          this.transport.setHandler(function(event) {
            return _this.handleEvent(event);
          });
        }
      }
      _createClass(Channel2, [{
        key: "hasTransport",
        get: function get() {
          return !!this.transport;
        }
      }, {
        key: "addListener",
        value: function addListener(eventName, listener) {
          this.events[eventName] = this.events[eventName] || [];
          this.events[eventName].push(listener);
        }
      }, {
        key: "emit",
        value: function emit(eventName) {
          var _this2 = this;
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          var event = {
            type: eventName,
            args,
            from: this.sender
          };
          var options = {};
          if (args.length >= 1 && args[0] && args[0].options) {
            options = args[0].options;
          }
          var handler = function handler2() {
            if (_this2.transport) {
              _this2.transport.send(event, options);
            }
            _this2.handleEvent(event);
          };
          if (this.isAsync) {
            setImmediate(handler);
          } else {
            handler();
          }
        }
      }, {
        key: "last",
        value: function last(eventName) {
          return this.data[eventName];
        }
      }, {
        key: "eventNames",
        value: function eventNames() {
          return Object.keys(this.events);
        }
      }, {
        key: "listenerCount",
        value: function listenerCount(eventName) {
          var listeners = this.listeners(eventName);
          return listeners ? listeners.length : 0;
        }
      }, {
        key: "listeners",
        value: function listeners(eventName) {
          var listeners2 = this.events[eventName];
          return listeners2 || void 0;
        }
      }, {
        key: "once",
        value: function once3(eventName, listener) {
          var onceListener = this.onceListener(eventName, listener);
          this.addListener(eventName, onceListener);
        }
      }, {
        key: "removeAllListeners",
        value: function removeAllListeners(eventName) {
          if (!eventName) {
            this.events = {};
          } else if (this.events[eventName]) {
            delete this.events[eventName];
          }
        }
      }, {
        key: "removeListener",
        value: function removeListener(eventName, listener) {
          var listeners = this.listeners(eventName);
          if (listeners) {
            this.events[eventName] = listeners.filter(function(l) {
              return l !== listener;
            });
          }
        }
      }, {
        key: "on",
        value: function on(eventName, listener) {
          this.addListener(eventName, listener);
        }
      }, {
        key: "off",
        value: function off(eventName, listener) {
          this.removeListener(eventName, listener);
        }
      }, {
        key: "handleEvent",
        value: function handleEvent(event) {
          var listeners = this.listeners(event.type);
          if (listeners && listeners.length) {
            listeners.forEach(function(fn) {
              fn.apply(event, event.args);
            });
          }
          this.data[event.type] = event.args;
        }
      }, {
        key: "onceListener",
        value: function onceListener(eventName, listener) {
          var _this3 = this;
          var onceListener2 = function onceListener3() {
            _this3.removeListener(eventName, onceListener3);
            return listener.apply(void 0, arguments);
          };
          return onceListener2;
        }
      }]);
      return Channel2;
    }();
    esm_default2 = Channel;
  }
});

// ../../node_modules/@storybook/addon-a11y/node_modules/@storybook/client-logger/dist/esm/index.js
var import_es_array_iterator, import_es_string_iterator, import_es_regexp_exec, import_global, LOGLEVEL, console, levels, currentLogLevelString, currentLogLevelNumber, logger, logged, once, pretty;
var init_esm3 = __esm({
  "../../node_modules/@storybook/addon-a11y/node_modules/@storybook/client-logger/dist/esm/index.js"() {
    init_es_array_concat();
    import_es_array_iterator = __toESM(require_es_array_iterator());
    init_es_object_to_string();
    init_es_set();
    import_es_string_iterator = __toESM(require_es_string_iterator());
    init_web_dom_collections_iterator();
    import_es_regexp_exec = __toESM(require_es_regexp_exec());
    init_es_string_replace();
    import_global = __toESM(require_window());
    LOGLEVEL = import_global.default.LOGLEVEL;
    console = import_global.default.console;
    levels = {
      trace: 1,
      debug: 2,
      info: 3,
      warn: 4,
      error: 5,
      silent: 10
    };
    currentLogLevelString = LOGLEVEL;
    currentLogLevelNumber = levels[currentLogLevelString] || levels.info;
    logger = {
      trace: function trace(message) {
        for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          rest[_key - 1] = arguments[_key];
        }
        return currentLogLevelNumber <= levels.trace && console.trace.apply(console, [message].concat(rest));
      },
      debug: function debug(message) {
        for (var _len2 = arguments.length, rest = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          rest[_key2 - 1] = arguments[_key2];
        }
        return currentLogLevelNumber <= levels.debug && console.debug.apply(console, [message].concat(rest));
      },
      info: function info(message) {
        for (var _len3 = arguments.length, rest = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
          rest[_key3 - 1] = arguments[_key3];
        }
        return currentLogLevelNumber <= levels.info && console.info.apply(console, [message].concat(rest));
      },
      warn: function warn(message) {
        for (var _len4 = arguments.length, rest = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
          rest[_key4 - 1] = arguments[_key4];
        }
        return currentLogLevelNumber <= levels.warn && console.warn.apply(console, [message].concat(rest));
      },
      error: function error(message) {
        for (var _len5 = arguments.length, rest = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
          rest[_key5 - 1] = arguments[_key5];
        }
        return currentLogLevelNumber <= levels.error && console.error.apply(console, [message].concat(rest));
      },
      log: function log(message) {
        for (var _len6 = arguments.length, rest = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
          rest[_key6 - 1] = arguments[_key6];
        }
        return currentLogLevelNumber < levels.silent && console.log.apply(console, [message].concat(rest));
      }
    };
    logged = /* @__PURE__ */ new Set();
    once = function once2(type) {
      return function(message) {
        if (logged.has(message))
          return void 0;
        logged.add(message);
        for (var _len7 = arguments.length, rest = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {
          rest[_key7 - 1] = arguments[_key7];
        }
        return logger[type].apply(logger, [message].concat(rest));
      };
    };
    once.clear = function() {
      return logged.clear();
    };
    once.trace = once("trace");
    once.debug = once("debug");
    once.info = once("info");
    once.warn = once("warn");
    once.error = once("error");
    once.log = once("log");
    pretty = function pretty2(type) {
      return function() {
        var argArray = [];
        for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
          args[_key8] = arguments[_key8];
        }
        if (args.length) {
          var startTagRe = /<span\s+style=(['"])([^'"]*)\1\s*>/gi;
          var endTagRe = /<\/span>/gi;
          var reResultArray;
          argArray.push(args[0].replace(startTagRe, "%c").replace(endTagRe, "%c"));
          while (reResultArray = startTagRe.exec(args[0])) {
            argArray.push(reResultArray[2]);
            argArray.push("");
          }
          for (var j = 1; j < args.length; j++) {
            argArray.push(args[j]);
          }
        }
        logger[type].apply(logger, argArray);
      };
    };
    pretty.trace = pretty("trace");
    pretty.debug = pretty("debug");
    pretty.info = pretty("info");
    pretty.warn = pretty("warn");
    pretty.error = pretty("error");
  }
});

// ../../node_modules/@storybook/addon-a11y/node_modules/@storybook/addons/dist/esm/storybook-channel-mock.js
function mockChannel() {
  var transport = {
    setHandler: function setHandler() {
    },
    send: function send() {
    }
  };
  return new esm_default2({
    transport
  });
}
var init_storybook_channel_mock = __esm({
  "../../node_modules/@storybook/addon-a11y/node_modules/@storybook/addons/dist/esm/storybook-channel-mock.js"() {
    init_esm2();
  }
});

// ../../node_modules/@storybook/addon-a11y/node_modules/@storybook/addons/dist/esm/types.js
var types;
var init_types = __esm({
  "../../node_modules/@storybook/addon-a11y/node_modules/@storybook/addons/dist/esm/types.js"() {
    init_es_array_find();
    init_es_object_to_string();
    init_es_object_values();
    (function(types2) {
      types2["TAB"] = "tab";
      types2["PANEL"] = "panel";
      types2["TOOL"] = "tool";
      types2["TOOLEXTRA"] = "toolextra";
      types2["PREVIEW"] = "preview";
      types2["NOTES_ELEMENT"] = "notes-element";
    })(types || (types = {}));
  }
});

// ../../node_modules/@storybook/addon-a11y/node_modules/@storybook/addons/dist/esm/index.js
function _defineProperties2(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass2(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties2(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties2(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
function _classCallCheck2(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function getAddonsStore() {
  if (!import_global2.default[KEY]) {
    import_global2.default[KEY] = new AddonStore();
  }
  return import_global2.default[KEY];
}
var import_global2, AddonStore, KEY, addons;
var init_esm4 = __esm({
  "../../node_modules/@storybook/addon-a11y/node_modules/@storybook/addons/dist/esm/index.js"() {
    init_es_object_assign();
    init_es_object_to_string();
    init_web_dom_collections_for_each();
    init_es_object_values();
    init_es_promise();
    import_global2 = __toESM(require_window());
    init_esm2();
    init_esm3();
    init_storybook_channel_mock();
    init_types();
    AddonStore = _createClass2(function AddonStore2() {
      var _this = this;
      _classCallCheck2(this, AddonStore2);
      this.loaders = {};
      this.elements = {};
      this.config = {};
      this.channel = void 0;
      this.serverChannel = void 0;
      this.promise = void 0;
      this.resolve = void 0;
      this.getChannel = function() {
        if (!_this.channel) {
          _this.setChannel(mockChannel());
        }
        return _this.channel;
      };
      this.getServerChannel = function() {
        if (!_this.serverChannel) {
          throw new Error("Accessing non-existent serverChannel");
        }
        return _this.serverChannel;
      };
      this.ready = function() {
        return _this.promise;
      };
      this.hasChannel = function() {
        return !!_this.channel;
      };
      this.hasServerChannel = function() {
        return !!_this.serverChannel;
      };
      this.setChannel = function(channel) {
        _this.channel = channel;
        _this.resolve();
      };
      this.setServerChannel = function(channel) {
        _this.serverChannel = channel;
      };
      this.getElements = function(type) {
        if (!_this.elements[type]) {
          _this.elements[type] = {};
        }
        return _this.elements[type];
      };
      this.addPanel = function(name, options) {
        _this.add(name, Object.assign({
          type: types.PANEL
        }, options));
      };
      this.add = function(name, addon) {
        var type = addon.type;
        var collection = _this.getElements(type);
        collection[name] = Object.assign({
          id: name
        }, addon);
      };
      this.setConfig = function(value) {
        Object.assign(_this.config, value);
      };
      this.getConfig = function() {
        return _this.config;
      };
      this.register = function(name, registerCallback) {
        if (_this.loaders[name]) {
          logger.warn("".concat(name, " was loaded twice, this could have bad side-effects"));
        }
        _this.loaders[name] = registerCallback;
      };
      this.loadAddons = function(api) {
        Object.values(_this.loaders).forEach(function(value) {
          return value(api);
        });
      };
      this.promise = new Promise(function(res) {
        _this.resolve = function() {
          return res(_this.getChannel());
        };
      });
    });
    KEY = "__STORYBOOK_ADDONS";
    addons = getAddonsStore();
  }
});

// ../../node_modules/@storybook/addon-a11y/node_modules/@storybook/addons/dist/esm/make-decorator.js
var init_make_decorator = __esm({
  "../../node_modules/@storybook/addon-a11y/node_modules/@storybook/addons/dist/esm/make-decorator.js"() {
    init_es_function_name();
    init_es_array_concat();
  }
});

// ../../node_modules/@storybook/addon-a11y/node_modules/@storybook/core-events/dist/esm/index.js
var events, CHANNEL_CREATED, CONFIG_ERROR, STORY_INDEX_INVALIDATED, STORY_SPECIFIED, SET_STORIES, SET_CURRENT_STORY, CURRENT_STORY_WAS_SET, FORCE_RE_RENDER, FORCE_REMOUNT, STORY_PREPARED, STORY_CHANGED, STORY_UNCHANGED, PRELOAD_STORIES, STORY_RENDERED, STORY_MISSING, STORY_ERRORED, STORY_THREW_EXCEPTION, STORY_RENDER_PHASE_CHANGED, UPDATE_STORY_ARGS, STORY_ARGS_UPDATED, RESET_STORY_ARGS, SET_GLOBALS, UPDATE_GLOBALS, GLOBALS_UPDATED, REGISTER_SUBSCRIPTION, PREVIEW_KEYDOWN, SELECT_STORY, STORIES_COLLAPSE_ALL, STORIES_EXPAND_ALL, DOCS_RENDERED, SHARED_STATE_CHANGED, SHARED_STATE_SET, NAVIGATE_URL, UPDATE_QUERY_PARAMS, IGNORED_EXCEPTION;
var init_esm5 = __esm({
  "../../node_modules/@storybook/addon-a11y/node_modules/@storybook/core-events/dist/esm/index.js"() {
    (function(events2) {
      events2["CHANNEL_CREATED"] = "channelCreated";
      events2["CONFIG_ERROR"] = "configError";
      events2["STORY_INDEX_INVALIDATED"] = "storyIndexInvalidated";
      events2["STORY_SPECIFIED"] = "storySpecified";
      events2["SET_STORIES"] = "setStories";
      events2["SET_CURRENT_STORY"] = "setCurrentStory";
      events2["CURRENT_STORY_WAS_SET"] = "currentStoryWasSet";
      events2["FORCE_RE_RENDER"] = "forceReRender";
      events2["FORCE_REMOUNT"] = "forceRemount";
      events2["PRELOAD_STORIES"] = "preloadStories";
      events2["STORY_PREPARED"] = "storyPrepared";
      events2["STORY_CHANGED"] = "storyChanged";
      events2["STORY_UNCHANGED"] = "storyUnchanged";
      events2["STORY_RENDERED"] = "storyRendered";
      events2["STORY_MISSING"] = "storyMissing";
      events2["STORY_ERRORED"] = "storyErrored";
      events2["STORY_THREW_EXCEPTION"] = "storyThrewException";
      events2["STORY_RENDER_PHASE_CHANGED"] = "storyRenderPhaseChanged";
      events2["UPDATE_STORY_ARGS"] = "updateStoryArgs";
      events2["STORY_ARGS_UPDATED"] = "storyArgsUpdated";
      events2["RESET_STORY_ARGS"] = "resetStoryArgs";
      events2["SET_GLOBALS"] = "setGlobals";
      events2["UPDATE_GLOBALS"] = "updateGlobals";
      events2["GLOBALS_UPDATED"] = "globalsUpdated";
      events2["REGISTER_SUBSCRIPTION"] = "registerSubscription";
      events2["PREVIEW_KEYDOWN"] = "previewKeydown";
      events2["SELECT_STORY"] = "selectStory";
      events2["STORIES_COLLAPSE_ALL"] = "storiesCollapseAll";
      events2["STORIES_EXPAND_ALL"] = "storiesExpandAll";
      events2["DOCS_RENDERED"] = "docsRendered";
      events2["SHARED_STATE_CHANGED"] = "sharedStateChanged";
      events2["SHARED_STATE_SET"] = "sharedStateSet";
      events2["NAVIGATE_URL"] = "navigateUrl";
      events2["UPDATE_QUERY_PARAMS"] = "updateQueryParams";
    })(events || (events = {}));
    CHANNEL_CREATED = events.CHANNEL_CREATED;
    CONFIG_ERROR = events.CONFIG_ERROR;
    STORY_INDEX_INVALIDATED = events.STORY_INDEX_INVALIDATED;
    STORY_SPECIFIED = events.STORY_SPECIFIED;
    SET_STORIES = events.SET_STORIES;
    SET_CURRENT_STORY = events.SET_CURRENT_STORY;
    CURRENT_STORY_WAS_SET = events.CURRENT_STORY_WAS_SET;
    FORCE_RE_RENDER = events.FORCE_RE_RENDER;
    FORCE_REMOUNT = events.FORCE_REMOUNT;
    STORY_PREPARED = events.STORY_PREPARED;
    STORY_CHANGED = events.STORY_CHANGED;
    STORY_UNCHANGED = events.STORY_UNCHANGED;
    PRELOAD_STORIES = events.PRELOAD_STORIES;
    STORY_RENDERED = events.STORY_RENDERED;
    STORY_MISSING = events.STORY_MISSING;
    STORY_ERRORED = events.STORY_ERRORED;
    STORY_THREW_EXCEPTION = events.STORY_THREW_EXCEPTION;
    STORY_RENDER_PHASE_CHANGED = events.STORY_RENDER_PHASE_CHANGED;
    UPDATE_STORY_ARGS = events.UPDATE_STORY_ARGS;
    STORY_ARGS_UPDATED = events.STORY_ARGS_UPDATED;
    RESET_STORY_ARGS = events.RESET_STORY_ARGS;
    SET_GLOBALS = events.SET_GLOBALS;
    UPDATE_GLOBALS = events.UPDATE_GLOBALS;
    GLOBALS_UPDATED = events.GLOBALS_UPDATED;
    REGISTER_SUBSCRIPTION = events.REGISTER_SUBSCRIPTION;
    PREVIEW_KEYDOWN = events.PREVIEW_KEYDOWN;
    SELECT_STORY = events.SELECT_STORY;
    STORIES_COLLAPSE_ALL = events.STORIES_COLLAPSE_ALL;
    STORIES_EXPAND_ALL = events.STORIES_EXPAND_ALL;
    DOCS_RENDERED = events.DOCS_RENDERED;
    SHARED_STATE_CHANGED = events.SHARED_STATE_CHANGED;
    SHARED_STATE_SET = events.SHARED_STATE_SET;
    NAVIGATE_URL = events.NAVIGATE_URL;
    UPDATE_QUERY_PARAMS = events.UPDATE_QUERY_PARAMS;
    IGNORED_EXCEPTION = new Error("ignoredException");
  }
});

// ../../node_modules/@storybook/addon-a11y/node_modules/@storybook/addons/dist/esm/hooks.js
function _classCallCheck3(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties3(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass3(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties3(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties3(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
var import_es_array_iterator2, import_es_string_iterator2, import_es_regexp_exec2, import_global3, globalWindow, HooksContext;
var init_hooks = __esm({
  "../../node_modules/@storybook/addon-a11y/node_modules/@storybook/addons/dist/esm/hooks.js"() {
    import_es_array_iterator2 = __toESM(require_es_array_iterator());
    init_es_object_to_string();
    import_es_string_iterator2 = __toESM(require_es_string_iterator());
    init_es_weak_map();
    init_web_dom_collections_iterator();
    init_es_set();
    init_web_dom_collections_for_each();
    init_es_array_includes();
    init_es_string_includes();
    init_es_function_name();
    init_es_array_map();
    init_es_array_concat();
    init_es_object_entries();
    init_es_object_keys();
    init_es_symbol();
    init_es_symbol_description();
    init_es_symbol_iterator();
    init_es_array_from();
    init_es_array_slice();
    import_es_regexp_exec2 = __toESM(require_es_regexp_exec());
    import_global3 = __toESM(require_window());
    init_esm3();
    init_esm5();
    init_esm4();
    globalWindow = import_global3.default.window;
    HooksContext = function() {
      function HooksContext2() {
        var _this = this;
        _classCallCheck3(this, HooksContext2);
        this.hookListsMap = void 0;
        this.mountedDecorators = void 0;
        this.prevMountedDecorators = void 0;
        this.currentHooks = void 0;
        this.nextHookIndex = void 0;
        this.currentPhase = void 0;
        this.currentEffects = void 0;
        this.prevEffects = void 0;
        this.currentDecoratorName = void 0;
        this.hasUpdates = void 0;
        this.currentContext = void 0;
        this.renderListener = function(storyId) {
          if (storyId !== _this.currentContext.id)
            return;
          _this.triggerEffects();
          _this.currentContext = null;
          _this.removeRenderListeners();
        };
        this.init();
      }
      _createClass3(HooksContext2, [{
        key: "init",
        value: function init() {
          this.hookListsMap = /* @__PURE__ */ new WeakMap();
          this.mountedDecorators = /* @__PURE__ */ new Set();
          this.prevMountedDecorators = this.mountedDecorators;
          this.currentHooks = [];
          this.nextHookIndex = 0;
          this.currentPhase = "NONE";
          this.currentEffects = [];
          this.prevEffects = [];
          this.currentDecoratorName = null;
          this.hasUpdates = false;
          this.currentContext = null;
        }
      }, {
        key: "clean",
        value: function clean() {
          this.prevEffects.forEach(function(effect) {
            if (effect.destroy) {
              effect.destroy();
            }
          });
          this.init();
          this.removeRenderListeners();
        }
      }, {
        key: "getNextHook",
        value: function getNextHook() {
          var hook = this.currentHooks[this.nextHookIndex];
          this.nextHookIndex += 1;
          return hook;
        }
      }, {
        key: "triggerEffects",
        value: function triggerEffects() {
          var _this2 = this;
          this.prevEffects.forEach(function(effect) {
            if (!_this2.currentEffects.includes(effect) && effect.destroy) {
              effect.destroy();
            }
          });
          this.currentEffects.forEach(function(effect) {
            if (!_this2.prevEffects.includes(effect)) {
              effect.destroy = effect.create();
            }
          });
          this.prevEffects = this.currentEffects;
          this.currentEffects = [];
        }
      }, {
        key: "addRenderListeners",
        value: function addRenderListeners() {
          this.removeRenderListeners();
          var channel = addons.getChannel();
          channel.on(STORY_RENDERED, this.renderListener);
        }
      }, {
        key: "removeRenderListeners",
        value: function removeRenderListeners() {
          var channel = addons.getChannel();
          channel.removeListener(STORY_RENDERED, this.renderListener);
        }
      }]);
      return HooksContext2;
    }();
  }
});

// ../../node_modules/@storybook/addon-a11y/node_modules/@storybook/addons/dist/esm/public_api.js
var init_public_api = __esm({
  "../../node_modules/@storybook/addon-a11y/node_modules/@storybook/addons/dist/esm/public_api.js"() {
    init_esm4();
    init_make_decorator();
    init_esm4();
    init_types();
    init_storybook_channel_mock();
    init_hooks();
  }
});

// ../../node_modules/@storybook/addon-a11y/dist/esm/constants.js
var ADDON_ID, PANEL_ID, HIGHLIGHT_STYLE_ID, RESULT, REQUEST, RUNNING, ERROR, MANUAL, HIGHLIGHT, EVENTS;
var init_constants = __esm({
  "../../node_modules/@storybook/addon-a11y/dist/esm/constants.js"() {
    ADDON_ID = "storybook/a11y";
    PANEL_ID = "".concat(ADDON_ID, "/panel");
    HIGHLIGHT_STYLE_ID = "a11yHighlight";
    RESULT = "".concat(ADDON_ID, "/result");
    REQUEST = "".concat(ADDON_ID, "/request");
    RUNNING = "".concat(ADDON_ID, "/running");
    ERROR = "".concat(ADDON_ID, "/error");
    MANUAL = "".concat(ADDON_ID, "/manual");
    HIGHLIGHT = "".concat(ADDON_ID, "/highlight");
    EVENTS = {
      RESULT,
      REQUEST,
      RUNNING,
      ERROR,
      MANUAL,
      HIGHLIGHT
    };
  }
});

// ../../node_modules/@storybook/addon-a11y/dist/esm/a11yRunner.js
var require_a11yRunner = __commonJS({
  "../../node_modules/@storybook/addon-a11y/dist/esm/a11yRunner.js"(exports, module) {
    init_es_object_to_string();
    init_es_promise();
    var import_runtime = __toESM(require_runtime());
    var import_global4 = __toESM(require_window());
    init_public_api();
    init_constants();
    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info2 = gen[key](arg);
        var value = info2.value;
      } catch (error2) {
        reject(error2);
        return;
      }
      if (info2.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }
    function _asyncToGenerator(fn) {
      return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
          var gen = fn.apply(self, args);
          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }
          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }
          _next(void 0);
        });
      };
    }
    var document = import_global4.default.document;
    var globalWindow2 = import_global4.default.window;
    if (module && module.hot && module.hot.decline) {
      module.hot.decline();
    }
    var channel = addons.getChannel();
    var active = false;
    var activeStoryId;
    var handleRequest = function() {
      var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(storyId) {
        var _yield$getParams, manual;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return getParams(storyId);
              case 2:
                _yield$getParams = _context.sent;
                manual = _yield$getParams.manual;
                if (manual) {
                  _context.next = 7;
                  break;
                }
                _context.next = 7;
                return run(storyId);
              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
      return function handleRequest2(_x) {
        return _ref.apply(this, arguments);
      };
    }();
    var run = function() {
      var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(storyId) {
        var input, axe, _input$element, element, config, _input$options, options, htmlElement, result;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                activeStoryId = storyId;
                _context2.prev = 1;
                _context2.next = 4;
                return getParams(storyId);
              case 4:
                input = _context2.sent;
                if (active) {
                  _context2.next = 19;
                  break;
                }
                active = true;
                channel.emit(EVENTS.RUNNING);
                _context2.next = 10;
                return import("./axe-core.js");
              case 10:
                axe = _context2.sent.default;
                _input$element = input.element, element = _input$element === void 0 ? "#root" : _input$element, config = input.config, _input$options = input.options, options = _input$options === void 0 ? {} : _input$options;
                htmlElement = document.querySelector(element);
                axe.reset();
                if (config) {
                  axe.configure(config);
                }
                _context2.next = 17;
                return axe.run(htmlElement, options);
              case 17:
                result = _context2.sent;
                if (activeStoryId === storyId) {
                  channel.emit(EVENTS.RESULT, result);
                } else {
                  active = false;
                  run(activeStoryId);
                }
              case 19:
                _context2.next = 24;
                break;
              case 21:
                _context2.prev = 21;
                _context2.t0 = _context2["catch"](1);
                channel.emit(EVENTS.ERROR, _context2.t0);
              case 24:
                _context2.prev = 24;
                active = false;
                return _context2.finish(24);
              case 27:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, null, [[1, 21, 24, 27]]);
      }));
      return function run2(_x2) {
        return _ref2.apply(this, arguments);
      };
    }();
    var getParams = function() {
      var _ref3 = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(storyId) {
        var _ref4, parameters;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return globalWindow2.__STORYBOOK_STORY_STORE__.loadStory({
                  storyId
                });
              case 2:
                _context3.t0 = _context3.sent;
                if (_context3.t0) {
                  _context3.next = 5;
                  break;
                }
                _context3.t0 = {};
              case 5:
                _ref4 = _context3.t0;
                parameters = _ref4.parameters;
                return _context3.abrupt("return", parameters.a11y || {
                  config: {},
                  options: {
                    restoreScroll: true
                  }
                });
              case 8:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));
      return function getParams2(_x3) {
        return _ref3.apply(this, arguments);
      };
    }();
    channel.on(EVENTS.REQUEST, handleRequest);
    channel.on(EVENTS.MANUAL, run);
  }
});

// ../../node_modules/@storybook/addon-a11y/dist/esm/highlight.js
var highlightStyle;
var init_highlight = __esm({
  "../../node_modules/@storybook/addon-a11y/dist/esm/highlight.js"() {
    highlightStyle = function highlightStyle2(color) {
      return "\n  outline: 2px dashed ".concat(color, ";\n  outline-offset: 2px;\n  box-shadow: 0 0 0 6px rgba(255,255,255,0.6);\n");
    };
  }
});

// ../../node_modules/@storybook/addon-a11y/dist/esm/a11yHighlight.js
var require_a11yHighlight = __commonJS({
  "../../node_modules/@storybook/addon-a11y/dist/esm/a11yHighlight.js"(exports, module) {
    init_es_array_from();
    var import_es_string_iterator3 = __toESM(require_es_string_iterator());
    var import_es_array_iterator3 = __toESM(require_es_array_iterator());
    init_es_object_to_string();
    init_es_set();
    init_web_dom_collections_iterator();
    init_es_array_join();
    init_es_array_map();
    init_es_array_concat();
    var import_global4 = __toESM(require_window());
    init_public_api();
    init_esm5();
    init_constants();
    init_highlight();
    var document = import_global4.default.document;
    if (module && module.hot && module.hot.decline) {
      module.hot.decline();
    }
    var channel = addons.getChannel();
    var highlight = function highlight2(infos) {
      var id = HIGHLIGHT_STYLE_ID;
      resetHighlight();
      var elements = Array.from(new Set(infos.elements));
      var sheet = document.createElement("style");
      sheet.setAttribute("id", id);
      sheet.innerHTML = elements.map(function(target) {
        return "".concat(target, "{\n          ").concat(highlightStyle(infos.color), "\n         }");
      }).join(" ");
      document.head.appendChild(sheet);
    };
    var resetHighlight = function resetHighlight2() {
      var id = HIGHLIGHT_STYLE_ID;
      var sheetToBeRemoved = document.getElementById(id);
      if (sheetToBeRemoved) {
        sheetToBeRemoved.parentNode.removeChild(sheetToBeRemoved);
      }
    };
    channel.on(STORY_CHANGED, resetHighlight);
    channel.on(EVENTS.HIGHLIGHT, highlight);
  }
});

// ../../node_modules/@storybook/addon-a11y/dist/esm/preview.js
var import_a11yRunner = __toESM(require_a11yRunner());
var import_a11yHighlight = __toESM(require_a11yHighlight());
//# sourceMappingURL=@storybook_addon-a11y_preview__js.js.map
